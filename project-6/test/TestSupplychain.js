// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    const _Harvested = 0;
    const _Processed = 1;
    const _Packed = 2;
    const _ForSale = 3;
    const _Sold = 4;
    const _Shipped = 5;
    const _Received = 6;
    const _Purchased = 7;

    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    function createExpectedItem()
    {
        var result = {
            itemSKU: sku,
            itemUPC: upc,
            ownerID: originFarmerID,
            originFarmerID: originFarmerID,
            originFarmName: originFarmName,
            originFarmInformation: originFarmInformation,
            originFarmLatitude: originFarmLatitude,
            originFarmLongitude: originFarmLongitude,
            productID: productID,
            productNotes: productNotes,
            productPrice: productPrice,
            itemState: itemState,
            distributorID: emptyAddress,
            retailerID: emptyAddress,
            consumerID: emptyAddress
        };
        return result;
    }

    function assetItemsAreEqual(item, expectedItem)
    {
       assert.equal(item.itemSKU, expectedItem.itemSKU, 'Error: Invalid item SKU');
       assert.equal(item.itemUPC, expectedItem.itemUPC, 'Error: Invalid item UPC');
       assert.equal(item.ownerID, expectedItem.ownerID, 'Error: Missing or Invalid ownerID');
       assert.equal(item.originFarmerID, expectedItem.originFarmerID, 'Error: Missing or Invalid originFarmerID');
       assert.equal(item.originFarmName, expectedItem.originFarmName, 'Error: Missing or Invalid originFarmName');
       assert.equal(item.originFarmInformation, expectedItem.originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
       assert.equal(item.originFarmLatitude, expectedItem.originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
       assert.equal(item.originFarmLongitude, expectedItem.originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
       assert.equal(item.itemState, expectedItem.itemState, 'Error: Invalid item State');
       assert.equal(item.distributorID, expectedItem.distributorID, 'Error: Invalid item State dist');
       assert.equal(item.retailerID, expectedItem.retailerID, 'Error: Invalid item State retail');
       assert.equal(item.consumerID, expectedItem.consumerID, 'Error: Invalid item State consum');
    }

    async function fetchItemFromSupplyChain(supplyChain, upc, account = ownerID ) {
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, {from: account});
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, {from: account});
      const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc, {from: account});

      var result = {
        itemSKU: resultBufferOne[0],
          itemUPC: resultBufferOne[1],
          ownerID: resultBufferOne[2],
          originFarmerID: resultBufferOne[3],
          originFarmName: resultBufferOne[4],
          originFarmInformation: resultBufferOne[5],

          originFarmLatitude: resultBufferTwo[2],
          originFarmLongitude: resultBufferTwo[3],
          productID: resultBufferTwo[4],
          productNotes: resultBufferTwo[5],
          productPrice: resultBufferTwo[6],

          itemState: resultBufferThree[2],
          distributorID: resultBufferThree[3],
          retailerID: resultBufferThree[4],
          consumerID: resultBufferThree[5]
      };
      return result;
    }

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {

      const supplyChain = await SupplyChain.deployed()
      await supplyChain.addFarmer(originFarmerID)

      var expectedItem = createExpectedItem();
      //console.log(expectedItem.originFarmLatitude)

      // Mark an item as Harvested by calling function harvestItem()
      let lHarvested = await supplyChain.harvestItem(
        expectedItem.itemUPC,
        expectedItem.originFarmerID,
        expectedItem.originFarmName,
        expectedItem.originFarmInformation,
        expectedItem.originFarmLatitude,
        expectedItem.originFarmLongitude,
        expectedItem.productNotes,
        {from: expectedItem.originFarmerID}
      )

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

      // Verify the result set
      assetItemsAreEqual(item, expectedItem);

    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
      const supplyChain = await SupplyChain.deployed()

      var expectedItem = createExpectedItem();
      expectedItem.itemState = _Processed;

      // Mark an item as Processed by calling function processtItem()
      var lProcessed = await supplyChain.processItem(
        expectedItem.itemUPC,
        {from: expectedItem.originFarmerID}
      );

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

      // Verify the result set
      assetItemsAreEqual(item, expectedItem);
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _Packed;

        // Mark an item as Packed by calling function packItem()
        var lPacked = await supplyChain.packItem(
            expectedItem.itemUPC,
            {from: expectedItem.originFarmerID}
        );

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

        // Verify the result set
        assetItemsAreEqual(item, expectedItem);
    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _ForSale;

        // Mark an item as ForSale by calling function sellItem()
        var lForSale = await supplyChain.sellItem(
            expectedItem.itemUPC,
            expectedItem.productPrice,
            {from: expectedItem.originFarmerID}
        );

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

        // Verify the result set
        assetItemsAreEqual(item, expectedItem);
    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        await supplyChain.addDistributor(distributorID);

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _Sold;
        expectedItem.ownerID = distributorID;
        expectedItem.distributorID = distributorID;

        // Mark an item as Sold by calling function buyItem()
        var lSold = await supplyChain.buyItem(
            expectedItem.itemUPC,
            {from: distributorID, value: expectedItem.productPrice}
        );

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

        // Verify the result set
        assetItemsAreEqual(item, expectedItem);
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _Shipped;
        expectedItem.ownerID = distributorID;
        expectedItem.distributorID = distributorID;

        // Mark an item as Shipped by calling function shipItem()
        var lShipped = await supplyChain.shipItem(
            expectedItem.itemUPC,
            {from: distributorID }
        );

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

        // Verify the result set
        assetItemsAreEqual(item, expectedItem);
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addRetailer(retailerID);

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _Received;
        expectedItem.ownerID = retailerID;
        expectedItem.distributorID = distributorID;
        expectedItem.retailerID = retailerID;

        // Mark an item as Received by calling function receiveItem()
        var lReceived = await supplyChain.receiveItem(
            expectedItem.itemUPC,
            {from: retailerID }
        );

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

        // Verify the result set
        assetItemsAreEqual(item, expectedItem);
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID);

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _Purchased;
        expectedItem.ownerID = consumerID;
        expectedItem.distributorID = distributorID;
        expectedItem.retailerID = retailerID;
        expectedItem.consumerID = consumerID;

        // Mark an item as Purchased by calling function purchaseItem()
        var lPurchased = await supplyChain.purchaseItem(
            expectedItem.itemUPC,
            {from: consumerID }
        );

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC);

        // Verify the result set
        assetItemsAreEqual(item, expectedItem);
    })

    // 9th Test
    it("Testing smart contract functions for fetchItemBuffer that allows anyone to fetch item details from blockchain", async() => {
        // Note: I have combined tests 9 and 10, (and the necessary 11th) calling fetchItemBuffer,
        // to use my existig helper function 'fetchItemFromSupplyChain', which calls all three.
        const supplyChain = await SupplyChain.deployed()

        var expectedItem = createExpectedItem();
        expectedItem.itemState = _Purchased;
        expectedItem.ownerID = consumerID;
        expectedItem.distributorID = distributorID;
        expectedItem.retailerID = retailerID;
        expectedItem.consumerID = consumerID;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        // Here we use accounts[5], which has not been prior interactions with the block chain
        var item = await fetchItemFromSupplyChain(supplyChain, expectedItem.itemUPC, accounts[5] );

        // Verify the result set:
        assetItemsAreEqual(item, expectedItem);
    })
});
